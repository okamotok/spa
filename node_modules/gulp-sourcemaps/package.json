{
  "name": "gulp-sourcemaps",
  "version": "0.4.1",
  "description": "Source map support for Gulp.js",
  "homepage": "http://github.com/floridoo/gulp-sourcemaps",
  "repository": {
    "type": "git",
    "url": "git://github.com/floridoo/gulp-sourcemaps.git"
  },
  "main": "index.js",
  "scripts": {
    "test": "jshint *.js test/*.js && faucet test/*.js",
    "tap": "node node_modules/argg test/*.js",
    "cover": "istanbul cover --dir reports/coverage node_modules/argg test/*.js",
    "coveralls": "istanbul cover node_modules/argg test/*.js --report lcovonly && cat ./coverage/lcov.info | coveralls && rm -rf ./coverage"
  },
  "keywords": [
    "gulp",
    "sourcemap"
  ],
  "author": {
    "name": "Florian Reiterer",
    "email": "me@florianreiterer.com"
  },
  "license": "ISC",
  "dependencies": {
    "through2": "^0.4.1",
    "vinyl": "^0.2.3",
    "convert-source-map": "^0.3.3"
  },
  "devDependencies": {
    "jshint": "^2.5.0",
    "tape": "^2.12.3",
    "argg": "0.0.1",
    "istanbul": "^0.2.8",
    "faucet": "0.0.1",
    "coveralls": "^2.10.0"
  },
  "readme": "## gulp-sourcemaps  [![NPM version][npm-image]][npm-url] [![build status][travis-image]][travis-url] [![Test coverage][coveralls-image]][coveralls-url]\n\n### Usage\n\n#### Inline maps\nInline maps are embedded in the source file.\n\n```javascript\nvar gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('javascript', function() {\n  gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init())\n      .pipe(concat('all.js'))\n      .pipe(uglify())\n    .pipe(sourcemaps.write())\n    .pipe(gulp.dest('dist'));\n});\n```\n\nAll plugins between `sourcemaps.init()` and `sourcemaps.write()` need to support source maps.\n\nWarning: the current NPM version of `gulp-concat` doesn't support source maps yet. You can use https://github.com/floridoo/gulp-concat/tree/sourcemap_pipe2 for now.\n\n#### External source map files\n\nTo write external source map files, pass a path relative to the destination to `sourcemaps.write()`.\n\nExample:\n```javascript\nvar gulp = require('gulp');\nvar concat = require('gulp-concat');\nvar uglify = require('gulp-uglify');\nvar sourcemaps = require('gulp-sourcemaps');\n\ngulp.task('javascript', function() {\n  gulp.src('src/**/*.js')\n    .pipe(sourcemaps.init())\n      .pipe(concat('all.js'))\n      .pipe(uglify())\n    .pipe(sourcemaps.write('../maps'))\n    .pipe(gulp.dest('dist'));\n});\n```\n\n\n### Options\n\n- `addComment`\n\n  By default a comment containing / referencing the source map is added. Set this to `false` to disable the comment (e.g. if you want to load the source maps by header).\n\n  Example:\n  ```javascript\n  gulp.task('javascript', function() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(concat('all.js'))\n        .pipe(uglify())\n      .pipe(sourcemaps.write('../maps', {addComment: false}))\n      .pipe(gulp.dest('dist'));\n  });\n  ```\n\n- `includeContent`\n\n  By default the source maps include the source code. Pass `false` to use the original files.\n\n- `sourceRoot`\n\n  Set the path where the source files are hosted (use this when `includeContent` is set to `false`).\n\n  Example:\n  ```javascript\n  gulp.task('javascript', function() {\n    var stream = gulp.src('src/**/*.js')\n      .pipe(sourcemaps.init())\n        .pipe(concat('all.js'))\n        .pipe(uglify())\n      .pipe(sourcemaps.write({includeContent: false, sourceRoot: '/src'}))\n      .pipe(gulp.dest('dist'));\n  });\n  ```\n\n### Plugin developers only: How to add source map support to plugins\n\n- Generate a source map for the transformation the plugin is applying\n- Apply this source map to the vinyl `file`. E.g. by using [vinyl-sourcemaps-apply](https://github.com/floridoo/vinyl-sourcemaps-apply).\n  This combines the source map of this plugin with the source maps coming from plugins further up the chain.\n\n#### Example:\n\n```javascript\nvar through = require('through2');\nvar applySourceMap = require('vinyl-sourcemaps-apply');\nvar myTransform = require('myTransform');\n\nmodule.exports = function(options) {\n\n  function transform(file, encoding, callback) {\n    // generate source maps if plugin source-map present\n    if (file.sourceMap) {\n      options.makeSourceMaps = true;\n    }\n\n    // do normal plugin logic\n    var result = myTransform(file.contents, options);\n    file.contents = new Buffer(result.code);\n\n    // apply source map to the chain\n    if (file.sourceMap) {\n      applySourceMap(file, result.map);\n    }\n\n    this.push(file);\n    callback();\n  }\n\n  return through.obj(transform);\n};\n```\n\n[npm-image]: https://img.shields.io/npm/v/gulp-sourcemaps.svg?style=flat\n[npm-url]: https://npmjs.org/package/gulp-sourcemaps\n[travis-image]: https://img.shields.io/travis/floridoo/gulp-sourcemaps.svg?style=flat\n[travis-url]: https://travis-ci.org/floridoo/gulp-sourcemaps\n[coveralls-image]: https://img.shields.io/coveralls/floridoo/gulp-sourcemaps.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/floridoo/gulp-sourcemaps?branch=master\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/floridoo/gulp-sourcemaps/issues"
  },
  "_id": "gulp-sourcemaps@0.4.1",
  "dist": {
    "shasum": "f661f43200c66bfb528945e87d97824807f7fdfa"
  },
  "_from": "gulp-sourcemaps@",
  "_resolved": "https://registry.npmjs.org/gulp-sourcemaps/-/gulp-sourcemaps-0.4.1.tgz"
}
